____ ДЗ №9 _______:

Напишіть консольного бота помічника, який розпізнаватиме команди, що вводяться з клавіатури, 
і відповідати відповідно до введеної команди.

Бот помічник повинен стати для нас прототипом додатка-асистента. 
Додаток-асистент в першому наближенні повинен уміти працювати з книгою контактів і календарем. 
У цій домашній роботі зосередимося на інтерфейсі самого бота. 
Найбільш простий і зручний на початковому етапі розробки інтерфейс - це консольний додаток CLI (Command Line Interface). 
CLI досить просто реалізувати. Будь-який CLI складається з трьох основних елементів:

- Парсер команд. Частина, яка відповідає за розбір введених користувачем рядків, 
  виділення з рядка ключових слів та модифікаторів команд.
- Функції обробники команд — набір функцій, які ще називають handler, 
  вони відповідають за безпосереднє виконання команд.
- Цикл запит-відповідь. Ця частина програми відповідає за отримання від користувача
  даних та повернення користувачеві відповіді від функції-handlerа.

На першому етапі наш бот-асистент повинен вміти зберігати ім'я та номер телефону, 
знаходити номер телефону за ім'ям, змінювати записаний номер телефону, 
виводити в консоль всі записи, які зберіг. Щоб реалізувати таку нескладну логіку, скористаємося словником. 
У словнику будемо зберігати ім'я користувача як ключ і номер телефону як значення.

____ ДЗ №10_______:

У цьому завданні треба буде попрацювати над внутрішньою логікою асистента, над тим, 
як зберігаються дані, які саме дані і що з ними можна зробити.

Застосуємо для цих цілей об'єктно-орієнтоване програмування. 
Спершу виділимо декілька сутностей (моделей) з якими працюватимемо.

У користувача буде адресна книга або книга контактів. Ця книга контактів містить записи. 
Кожен запис містить деякий набір полів.

Таким чином ми описали сутності (класи), які необхідно реалізувати. 
Далі розглянемо вимоги до цих класів та встановимо їх взаємозв'язок, правила, за якими вони будуть взаємодіяти.

Користувач взаємодіє з книгой контактів, додаючи, видаляючи та редагуючи записи. 
Також користувач повинен мати можливість шукати в книзі контактів записи за одному або декількома критеріями (полям).

Про поля також можна сказати, що вони можуть бути обов'язковими (ім'я) та необов'язковими (телефон або email наприклад). 
Також записи можуть містити декілька полів одного типу (декілька телефонів наприклад). 
Користувач повинен мати можливість додавати/видаляти/редагувати поля у будь-якому записі.

В цій домашній роботі ви повинні реалізувати такі класи:

    Клас AddressBook, який успадковується від UserDict, та ми потім додамо логіку пошуку за записами до цього класу.
    Клас Record, який відповідає за логіку додавання/видалення/редагування необов'язкових полів та зберігання обов'язкового поля Name.
    Клас Field, який буде батьківським для всіх полів, у ньому потім реалізуємо логіку загальну для всіх полів.
    Клас Name, обов'язкове поле з ім'ям.
    Клас Phone, необов'язкове поле з телефоном та таких один запис (Record) може містити кілька.

Критерії прийому:

    Реалізовано всі класи із завдання.
    Записи Record у AddressBook зберігаються як значення у словнику. В якості ключів використовується значення Record.name.value.
    Record зберігає об'єкт Name в окремому атрибуті.
    Record зберігає список об'єктів Phone в окремому атрибуті.
    Record реалізує методи для додавання/видалення/редагування об'єктів Phone.
    AddressBook реалізує метод add_record, який додає Record у self.data.

____ ДЗ №11 _______:
У цьому домашньому завданні ми:

    Додамо поле для дня народження Birthday. Це поле не обов'язкове, але може бути тільки одне.
    Додамо функціонал роботи з Birthday у клас Record, а саме функцію days_to_birthday, яка повертає кількість днів до наступного дня народження.
    Додамо функціонал перевірки на правильність наведених значень для полів Phone, Birthday.
    Додамо пагінацію (посторінковий висновок) для AddressBook для ситуацій, коли книга дуже велика і треба показати вміст частинами, а не все одразу. Реалізуємо це через створення ітератора за записами.

Критерії прийому:

    AddressBook реалізує метод iterator, який повертає генератор за записами AddressBook і за одну ітерацію повертає уявлення для N записів.
    Клас Record приймає ще один додатковий (опціональний) аргумент класу Birthday
    Клас Record реалізує метод days_to_birthday, який повертає кількість днів до наступного дня народження контакту, якщо день народження заданий.
    setter та getter логіку для атрибутів value спадкоємців Field.
    Перевірку на коректність веденого номера телефону setter для value класу Phone.
    Перевірку на коректність веденого дня народження setter для value класу Birthday.

____ ДЗ №12 ______:
У цьому домашньому завданні вам треба:

    Додати функціонал збереження адресної книги на диск та відновлення з диска. 
    Для цього ви можете вибрати будь-який зручний для вас протокол серіалізації/десеріалізації даних 
    та реалізувати методи, які дозволять зберегти всі дані у файл і завантажити їх із файлу.

    Додати користувачеві можливість пошуку вмісту книги контактів, щоб можна було знайти всю 
    інформацію про одного або кількох користувачів за кількома цифрами номера телефону або літерами імені тощо.

Критерії прийому:

    Програма не втрачає дані після виходу з програми та відновлює їх з файлу.
    Програма виводить список користувачів, які мають в імені або номері телефону є збіги із введеним рядком.


